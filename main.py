import sys
from pathlib import Path
from services.leitor_excel import LeitorExcel

def mostrar_erro(mensagem):
    """Exibe mensagens de erro formatadas"""
    print(f"\n‚õî ERRO: {mensagem}")
    print("Verifique:")
    print("1. Se o arquivo Excel existe no local especificado")
    print("2. Se as abas 'Bobinas' e 'Linhas' est√£o corretas")
    print("3. Se os nomes das colunas correspondem ao esperado\n")

def carregar_dados(caminho_planilha):
    """Carrega e valida todos os dados da planilha"""
    try:
        print(f"\nüìä Carregando dados de: {Path(caminho_planilha).name}")
        
        # Verificar se o arquivo existe
        if not Path(caminho_planilha).exists():
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {caminho_planilha}")
        
        # Carregar dados
        bobinas = LeitorExcel.ler_bobinas(caminho_planilha)
        linhas = LeitorExcel.ler_linhas(caminho_planilha)
        
        # Valida√ß√µes b√°sicas
        if not bobinas:
            raise ValueError("Nenhuma bobina encontrada na planilha")
        if not linhas:
            raise ValueError("Nenhuma linha encontrada na planilha")
        
        print(f"‚úÖ {len(bobinas)} bobinas carregadas")
        print(f"‚úÖ {len(linhas)} linhas carregadas")
        
        return bobinas, linhas
        
    except Exception as e:
        mostrar_erro(str(e))
        sys.exit(1)

def processar_alocacao(bobinas, linhas):
    """Simula o processamento da aloca√ß√£o"""
    print("\n‚öôÔ∏è Processando aloca√ß√£o...")
    
    resultados = []
    for linha in linhas:
        for bobina in bobinas:
            # Verifica√ß√£o de di√¢metro
            if linha['Di√¢metro (m)'] > bobina['Di√¢metro Interno (m)']:
                continue
                
            # Verifica√ß√£o de peso (simplificada)
            peso_total = linha['Comprimento Necess√°rio (m)'] * linha['Peso por Metro (kg/m)']
            if 'Peso M√°ximo (kg)' in bobina and peso_total > bobina['Peso M√°ximo (kg)']:
                continue
                
            # Verifica√ß√£o de raio m√≠nimo (se existir nos dados)
            if 'Raio M√≠nimo (m)' in linha and 'Di√¢metro Externo (m)' in bobina:
                raio_bobina = bobina['Di√¢metro Externo (m)'] / 2
                if linha['Raio M√≠nimo (m)'] > raio_bobina:
                    continue
            
            # Se passou em todas as verifica√ß√µes
            resultados.append({
                'Linha ID': linha['ID'],
                'Bobina ID': bobina['ID'],
                'Comprimento Alocado': linha['Comprimento Necess√°rio (m)']
            })
            break
    
    return resultados

def main():
    print("\n=== SISTEMA DE ALOCA√á√ÉO DE LINHAS EM BOBINAS ===")
    
    # Configura√ß√£o do caminho - ajuste conforme necess√°rio
    caminho_planilha = r'C:\Users\paulo.andrade\Desktop\dados.xlsx'
    
    try:
        # Carregar dados
        bobinas, linhas = carregar_dados(caminho_planilha)
        
        # Processar aloca√ß√£o
        resultados = processar_alocacao(bobinas, linhas)
        
        # Exibir resultados
        print("\nüìù RESULTADOS DA ALOCA√á√ÉO:")
        if not resultados:
            print("Nenhuma aloca√ß√£o foi poss√≠vel com os crit√©rios atuais")
        else:
            for i, res in enumerate(resultados, 1):
                print(f"{i}. Linha {res['Linha ID']} ‚Üí Bobina {res['Bobina ID']} "
                      f"(Alocado: {res['Comprimento Alocado']}m)")
    
    except KeyboardInterrupt:
        print("\nOpera√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        mostrar_erro(f"Erro inesperado: {str(e)}")

if __name__ == "__main__":
    main()