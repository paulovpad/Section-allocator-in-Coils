# üåÄ Sistema de Aloca√ß√£o de Linhas em Bobinas

Otimize o armazenamento de cabos flex√≠veis em bobinas industriais usando empacotamento hexagonal inteligente!

## üöÄ Funcionalidades Principais
- Aloca√ß√£o autom√°tica de linhas/cabos em bobinas
- C√°lculo de posicionamento hexagonal otimizado
- Valida√ß√£o de restri√ß√µes f√≠sicas (peso, raio m√≠nimo, colis√µes)
- Gera√ß√£o de relat√≥rios detalhados de aloca√ß√£o
- Entrada de dados via Excel ou interface interativa

## ‚öôÔ∏è Instala√ß√£o
```bash
# Clone o reposit√≥rio
git clone https://github.com/seu-usuario/alocador-bobinas.git

# Acesse o diret√≥rio
cd alocador-bobinas

# Instale as depend√™ncias
pip install -r requirements.txt

Explica√ß√£o do algoritmo:

# Resumo

"Nosso algoritmo prioriza cabos menos flex√≠veis, mais grossos e com maior raz√£o raio/di√¢metro, garantindo que os mais sens√≠veis sejam alocados primeiro nas posi√ß√µes mais
 seguras. Isso otimiza espa√ßo, evita danos e reduz custos."

# Vis√£o Geral

O sistema tem como objetivo alocar linhas (cabos/fios) em bobinas usando um padr√£o de empacotamento hexagonal. O c√≥digo est√° organizado em m√≥dulos:
- core: Cont√©m a l√≥gica principal de aloca√ß√£o (`alocador.py`), c√°lculos geom√©tricos (`calculadora.py`) e valida√ß√µes (`validador.py`).
- models: Define as classes `Bobina`, `Linha` e `Camada`.
- services: Respons√°vel pela entrada de dados (via Excel ou interativa) e gera√ß√£o de relat√≥rios.
- main.py: Ponto de entrada do programa.

# Funcionamento do Algoritmo de Aloca√ß√£o

O cora√ß√£o do sistema est√° na classe `AlocadorBobinas` (em `alocador.py`). O m√©todo principal √© `alocar(linhas, bobinas)`, que tenta alocar as linhas nas bobinas seguindo estas etapas:

1. Ordena√ß√£o das linhas e bobinas**:
   - As linhas s√£o ordenadas por prioridade: flexibilidade (quanto maior a flexibilidade, menor o fator de redu√ß√£o do di√¢metro), di√¢metro decrescente e raz√£o entre raio m√≠nimo e di√¢metro.
   - As bobinas s√£o ordenadas por capacidade (volume dispon√≠vel) decrescente.

2. Tentativa de aloca√ß√£o de cada linha**:
   - Para cada linha, tenta alocar em uma das bobinas (na ordem de capacidade).
   - Em cada bobina, tenta:
     a. Adicionar a linha na √∫ltima camada existente (usando empacotamento hexagonal).
     b. Se n√£o for poss√≠vel, cria uma nova camada na bobina.

3. Adicionar linha em uma camada existente** (`_tentar_adicionar_linha_na_camada`):
   - Calcula posi√ß√µes hexagonais iterativamente (at√© um limite baseado na largura da bobina).
   - Alterna o lado inicial (esquerda/direita) a cada camada para otimizar o espa√ßo.
   - Para cada posi√ß√£o candidata, verifica:
     - Largura: se a linha cabe na bobina.
     - Colis√£o: se n√£o h√° sobreposi√ß√£o com outras linhas na mesma camada.
     - Raio m√≠nimo: se o raio efetivo naquela posi√ß√£o √© suficiente para a linha.

4. Criar uma nova camada** (`_tentar_criar_nova_camada`):
   - Define a posi√ß√£o inicial na borda da bobina (alternando o lado a cada camada).
   - Calcula o di√¢metro base da nova camada (baseado na camada anterior, se houver, ou no di√¢metro interno da bobina).
   - Verifica se a camada cabe no di√¢metro externo da bobina.
   - Adiciona a linha na nova camada.